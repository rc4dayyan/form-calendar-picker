{"version":3,"sources":["contexts/FormContext.js","components/FormSearch.js","App.js","serviceWorker.js","index.js"],"names":["FormContext","createContext","FormContextProvider","props","tomorrow","moment","Date","add","afterTomorrow","useState","localData","localStorage","getItem","JSON","parse","startDate","format","endDate","searchParams","setSearchParams","Provider","value","children","FormSearch","classNames","require","useContext","submitedSearchParams","setSubmitedSearchParams","handleSubmit","e","preventDefault","console","log","datePickerIsOpen","isDatePickerIsOpen","openDatePicker","start","end","state","className","style","padding","onSubmit","marginBottom","onClick","fontSize","display","href","hiddenText","onBlur","Component","withRange","Calendar","selected","onSelect","dataDate","eventType","width","height","dateStart","diff","duration","asDays","getNight","opacity","App","data-target","id","type","for","cols","rows","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99ceba1d.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport const FormContext = createContext();\n\nconst FormContextProvider = (props) => {\n\n    let tomorrow  = moment(new Date()).add(1,'days');\n\n    let afterTomorrow  = moment(new Date()).add(2,'days');\n\n    const [ searchParams, setSearchParams ] = useState(() => {\n        const localData = localStorage.getItem('submited-search-params');\n\n        return localData ? JSON.parse(localData) : {\n            startDate: tomorrow.format('ddd, MMM DD YYYY'), \n            endDate: afterTomorrow.format('ddd, MMM DD YYYY')\n        }\n    });\n\n    return (  \n        <FormContext.Provider value={{ searchParams, setSearchParams }}>\n            {props.children}\n        </FormContext.Provider>\n    );\n}\n\nFormContextProvider.propTypes = {\n    children: PropTypes.node,\n};\n\nexport default FormContextProvider;","import React, { useState, useContext } from 'react';\nimport { FormContext } from '../contexts/FormContext';\nimport moment from 'moment';\nimport InfiniteCalendar, { withRange, Calendar} from 'react-infinite-calendar';\nimport 'react-infinite-calendar/styles.css';\n\n\nconst FormSearch = () => {\n    \n    let classNames = require('classnames');\n\n    const { searchParams, setSearchParams } = useContext(FormContext);\n\n    let tomorrow  = moment(new Date()).add(1,'days');\n    let afterTomorrow  = moment(new Date()).add(2,'days');\n\n    const changeDate = (dataDate) => {\n        console.log(dataDate);\n        console.log(moment(dataDate.start) ? moment(dataDate.start).format(\"D\") : tomorrow.format(\"D\"));\n\n        setSearchParams({\n            ...searchParams,\n            startDate: dataDate.start ? moment(dataDate.start).format('ddd, MMM DD YYYY') : tomorrow.format('ddd, MMM DD YYYY'), \n            endDate: dataDate.end ? moment(dataDate.end).format('ddd, MMM DD YYYY') : afterTomorrow.format('ddd, MMM DD YYYY'), \n        });\n    }\n\n    const [ submitedSearchParams, setSubmitedSearchParams ] = useState(() => {\n        const localData = localStorage.getItem('submited-search-params');\n        return localData ? JSON.parse(localData) : {}\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setSubmitedSearchParams({endDate: searchParams.endDate, startDate: searchParams.startDate});\n        console.log(searchParams);\n    }\n    \n    const [ datePickerIsOpen, isDatePickerIsOpen ] = useState(false);\n    const openDatePicker = () => {\n        isDatePickerIsOpen(!datePickerIsOpen);\n    }\n    \n    const [state] = useState({\n        start: searchParams.startDate,\n        end: searchParams.endDate  \n    });\n\n    const getNight = () => {\n        let dateStart= moment(searchParams.startDate);\n        let dateEnd= moment(searchParams.endDate);\n        let diff = dateEnd.diff(dateStart);\n        let diffDuration = moment.duration(diff);\n        return \"( \"+ diffDuration.asDays() + \" Nights )\";\n    }\n\n    const onCalendarSelect = (e) => {\n        console.log(e);\n        if (e.eventType === 3) {\n            changeDate(e);\n        }\n    }\n\n    return (  \n        <div className=\"container\" style={{padding: '40px 0 20px 0'}}>\n            <form onSubmit={handleSubmit}>\n                <div className=\"row\">\n\n                    <div className=\"col s12\" style={{marginBottom: '0px'}}>\n                        <div className=\"row\" style={{marginBottom: '0px'}}>\n                            <div className=\"col s4\" onClick={openDatePicker}>\n                                <div className=\"z-depth-4 white-box\">\n                                    <i className=\"material-icons prefix blue-text text-darken-2\" style={{fontSize: '2rem'}}>date_range</i> &nbsp;\n                                    <span className=\"grey-text\">From Date</span><br />\n                                    <span className=\"date-title\">{moment(searchParams.startDate).format('ddd, DD MMM YYYY')}</span>\n                                </div>\n                            </div>\n                            <div className=\"col s4\" onClick={openDatePicker}>\n                                <div className=\"z-depth-4 white-box\">\n                                    <i className=\"material-icons prefix blue-text text-darken-2\" style={{fontSize: '2rem'}}>date_range</i> &nbsp;\n                                    <span className=\"grey-text\">To Date</span> <br />\n                                    <span className=\"date-title\">{moment(searchParams.endDate).format('ddd, DD MMM YYYY')}</span>\n                                </div>\n                            </div>\n                            <div className=\"col s4\">\n                                <a style={{display: 'block'}} className=\"btn-submit waves-effect waves-light btn btn-large animated tada orange darken-3 valign-wrapper center-align btn-search\" href=\"#!\" onClick={handleSubmit}> \n                                    Submit\n                                </a>\n                            </div>\n                        </div>\n                    </div>        \n                    \n                \n                    <div className={ classNames({ hiddenText: !datePickerIsOpen, 'col s12': true }) }>\n                        <div className=\"modal-dialogs-large\" onBlur={openDatePicker}>\n                            <div className=\"white\">    \n                                <InfiniteCalendar\n                                Component={withRange(Calendar)}\n                                selected={state}\n                                onSelect={onCalendarSelect}\n                                width='100%'\n                                height={250}\n                                />\n\n                                <a href=\"#!\" onClick={openDatePicker} className=\"waves-effect waves-light btn btn-large orange darken-3\" style={{width: '100%'}}>\n                                    OK {getNight()}\n                                </a>\n                            </div>\n                        </div>\n                        <div className=\"modal-overlay-large\" style={{display:'block',opacity: '0.5'}}></div>\n                    </div>\n                </div>\n            \n            </form>    \n\n            <div className=\"row\">\n                <div className=\"col s12\">\n                    <div className={classNames({'submited-search': true, hiddenText: typeof submitedSearchParams.startDate === 'undefined'})}>\n                        Your submited Search: <br />\n                        \n                        <span style={{fontSize: '20px'}}>{submitedSearchParams.startDate+\" - \"+submitedSearchParams.endDate}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        \n    );\n}\n \nexport default FormSearch;","import React from 'react';\nimport './App.css';\nimport FormContextProvider from './contexts/FormContext';\nimport FormSearch from './components/FormSearch';\n\nfunction App() {\n  return (\n    <div>\n      {/* navbar */}\n      <header>\n        <nav className=\"nav-wrapper transparent\">\n          <div className=\"container\">\n            <a href=\"#!\" className=\"brand-logo\">Calenar Picker</a>\n            <a href=\"#!\" className=\"sidenav-trigger\" data-target=\"mobile-menu\">\n              <i className=\"material-icons\">menu</i>\n            </a>\n            <ul className=\"right hide-on-med-and-down\">\n              <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n            <ul className=\"sidenav grey lighten-2\" id=\"mobile-menu\">\n              <li><a href=\"#!\">Contact</a></li>\n            </ul>\n          </div>\n        </nav>\n\n        <div className=\"App\">\n          <FormContextProvider>\n            <FormSearch />\n          </FormContextProvider>\n        </div>\n      </header>\n\n      {/* contact form */}\n      <section className=\"section container scrollspy\" id=\"contact\">\n        <div className=\"row\">\n          <div className=\"col s12 l5\">\n            <h2 className=\"indigo-text text-darken-4\">Get in Touch</h2>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum at lacus congue, suscipit elit nec, tincidunt orci.</p>\n            <p>Mauris dolor augue, vulputate in pharetra ac, facilisis nec libero. Fusce condimentum gravida urna, vitae scelerisque erat ornare nec.</p>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum at lacus congue, suscipit elit nec, tincidunt orci.</p>\n            <p>Mauris dolor augue, vulputate in pharetra ac, facilisis nec libero. Fusce condimentum gravida urna, vitae scelerisque erat ornare nec.</p>\n          </div>\n          <div className=\"col s12 l5 offset-l2\">\n            <form>\n              <div className=\"input-field\">\n                <i className=\"material-icons prefix\">email</i>\n                <input type=\"email\" id=\"email\" />\n                <label for=\"email\">Your Email</label>\n              </div>\n              <div className=\"input-field\">\n                <i className=\"material-icons prefix\">message</i>\n                <textarea id=\"message\" className=\"materialize-textarea\" cols=\"20\" rows=\"20\"></textarea>\n                <label for=\"message\">Your Message</label>\n              </div>\n              <div className=\"input-field\">\n                <i className=\"material-icons prefix\">date_range</i>\n                <input type=\"text\" id=\"date\" className=\"datepicker\" />\n                <label for=\"date\">Choose a date you need me for...</label>\n              </div>\n              <div className=\"input-field\">\n                <p>Services required:</p>\n                <p>\n                  <label>\n                    <input type=\"checkbox\" />\n                    <span>Photography</span>\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    <input type=\"checkbox\" />\n                    <span>Photo Editing</span>\n                  </label>\n                </p>\n              </div>\n              <div className=\"input-field center\">\n                <button className=\"btn\">Submit</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n\n      {/* footer */}\n      <footer className=\"page-footer white\">\n        <div className=\"footer-copyright grey darken-4\">\n          <div className=\"container center-align\">&copy; 2020 Calendar Picker</div>\n        </div>\n      </footer>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}